---
title: "Convertir archivos raw (EK80) a netCDF"
format: html
editor: visual
---

## 1. Primero convertir raw -\> nc con python

Instalar paquetes en terminal con `pip install 'package'`. NOTA: `cartopy` no se pudo instalar. Una vez instalados, cargar en la sesi贸n.

```{python}
from pathlib import Path

import fsspec
import numpy as np
import geopandas as gpd
import xarray as xr

import matplotlib.pyplot as plt
from shapely.geometry import box
#import cartopy.crs as ccrs
#import cartopy.io.img_tiles as cimgt
#from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER

import echopype as ep
from echopype.qc import exist_reversed_time

import warnings
warnings.simplefilter("ignore", category=DeprecationWarning)
```

Definir directorio con archivos raw

```{python}
rawdirpath = "raw"
```

Nombres de archivos raw

```{python}
import glob
s3rawfiles = glob.glob(f"{rawdirpath}/*.raw")
s3rawfiles
```

Abrir raw como como EchoData y convertir a netCDF

```{python}
for i in s3rawfiles:
  ed = ep.open_raw(i, sonar_model='EK80')
  ed.to_netcdf(save_path='./converted')
```

## 2. C贸digo R

Cargar paquete ncdf4

```{r}
library(ncdf4)
nc <- list.files(path = "./converted", pattern = glob2rx("*.nc"), full.names = TRUE)
```

Abrir un archivo

```{r}
ncf <- nc_open(nc[1])
```

Inspecci贸n del contenido

```{r}
names(ncf$var)

# verificar que existen
#ncvar_get(ncf, "Environment/absorption_indicative")
ncvar_get(ncf, "Platform/frequency_nominal")
lat <- ncvar_get(ncf, "Platform/latitude")
lon <- ncvar_get(ncf, "Platform/longitude")

plot(lon, lat, asp = 1)
```

Matriz de datos

```{r}
Sv <- ncvar_get(ncf, "Sonar/Beam_group1/backscatter_r")
dim(Sv)
f1 <- Sv[1, , , 1]
f1 <- f1[nrow(f1):1, ]
image(t(f1))
```

## Uso de funcion `getPingTimeEK80()`

```{r}
source("getPingTimeEK80.R")
pt <- getPingTimeEK80(nc[2])
pt[1:10]
# ver fracciones de segundo 
strftime(pt[1:10], "%Y-%m-%d %H:%M:%OS2")
```

Ecuaci贸n para convertir *Received power* (*Pr*) en $S_v$ (EK60)

$$
S_V(R, P_r) = P_r + 20log(R) + 2\alpha R - 10log(\frac{P_t G_0^2 \lambda ^2}{16 \pi^2}) -10log(\frac{c \tau \psi}{2}) -2 S_a\;corr
$$

Ec. para convertir *Pr* en $TS$

$$
TS(R, P_r) = P_r + 40log(R) + 2\alpha R - 10log(\frac{P_t G_0^2 \lambda ^2}{16 \pi^2})
$$

## Convertir a echogram

instalar el paquete

```{r}
# OJO SOLO UNA VEZ. Despues comentar las dos lineas con #
library(devtools)
install_github("hvillalo/echogram")
```

Ver la estructura de la clase

```{r}
hacfile <- system.file("extdata", "D20150510-T202221.hac", package = "echogram")
echo1 <- read.echogram(hacfile, channel = 1)
str(echo1)
```

Crear obj echogram desde el nc

```{r}
eco <- list(depth = ,
            Sv = , # matriz
            pings = data.frame(
              pingTime = , # clase POSIXct
              detBottom = NA,
              speed = NA,
              cumdist = NA
            ))
```
